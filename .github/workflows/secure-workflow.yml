name: ✅ Secure Workflow - Proper Credentials Management

# This workflow demonstrates SECURE practices for GitHub Actions
# with proper credential management and minimal permissions

on:
  push:
    branches: [ main, demo ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# 🛡️ SECURITY: Restrict permissions to minimum required
permissions:
  contents: read
  # Only grant specific permissions as needed
  # packages: write  # Uncomment only if publishing packages
  # id-token: write  # Uncomment only if using OIDC

jobs:
  secure-build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    # ✅ SECURE: Using checkout WITH persist-credentials: false
    # This prevents GitHub token from being stored in .git/config
    - name: 🔒 Checkout code (SECURE - no credential persistence)
      uses: actions/checkout@v4
      with:
        persist-credentials: false  # 🛡️ Key security setting
        
    # Verify that credentials are NOT accessible
    - name: ✅ Verify Secure Configuration
      run: |
        echo "🛡️ SECURITY VERIFICATION: Checking credential isolation"
        echo "Git config contents:"
        cat .git/config || echo "Could not read .git/config"
        echo ""
        echo "🔍 Checking for credential information..."
        if grep -i "token" .git/config; then
          echo "❌ WARNING: Token found in git configuration!"
          exit 1
        else
          echo "✅ No tokens found in git configuration"
        fi
        if grep -i "credential" .git/config; then
          echo "❌ WARNING: Credential helper configuration found!"
          exit 1
        else
          echo "✅ No credential helpers configured"
        fi
        echo "🎉 Credentials properly isolated!"
        
    # Setup Node.js
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    # Install dependencies
    - name: 📥 Install dependencies
      run: npm install
      
    # Run tests
    - name: 🧪 Run tests
      run: npm test
      
    # Run the application
    - name: 🏃 Run application
      run: npm start
      
    # Build Docker image
    - name: 🐳 Build Docker Image
      run: |
        echo "🔨 Building Docker image securely..."
        docker build -t secure-demo:latest .
        echo "✅ Docker image built successfully"
        
    # Security scanning (example)
    - name: 🔍 Security Scan Simulation
      run: |
        echo "🛡️ Running security scans..."
        echo "In a real workflow, you would run:"
        echo "- Container image vulnerability scanning"
        echo "- Dependency vulnerability checking"
        echo "- Static code analysis"
        echo "- License compliance checking"
        echo "✅ Security scans would complete here"
        
    # Demonstrate secure publishing approach
    - name: 📦 Secure NPM Publishing Approach
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "📤 Secure NPM publishing approach:"
        echo "✅ Use specific, scoped tokens"
        echo "✅ Limit token permissions"
        echo "✅ Use OIDC when possible"
        echo "✅ Implement publishing approval workflows"
        echo "✅ Enable package signing"
        echo "✅ Use provenance attestations"
        echo ""
        echo "Package would be published here with proper security measures"
      # env:
      #   NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}  # Only use when actually publishing
        
    # Demonstrate secure Docker publishing approach
    - name: 🐳 Secure Docker Publishing Approach
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "📤 Secure Docker publishing approach:"
        echo "✅ Use registry-specific tokens"
        echo "✅ Implement image signing"
        echo "✅ Generate SBOMs (Software Bill of Materials)"
        echo "✅ Use vulnerability scanning"
        echo "✅ Implement approval workflows"
        echo "✅ Use content trust"
        echo ""
        echo "Image would be pushed here with proper security measures"
        
    # Security best practices summary
    - name: 🛡️ Security Best Practices Applied
      run: |
        echo "🎉 SECURE WORKFLOW COMPLETED"
        echo "============================="
        echo ""
        echo "Security measures implemented:"
        echo ""
        echo "1. ✅ persist-credentials: false in checkout"
        echo "2. ✅ Minimal workflow permissions"
        echo "3. ✅ No credential exposure in logs"
        echo "4. ✅ Secure token management"
        echo "5. ✅ Vulnerability scanning integration"
        echo "6. ✅ Conditional publishing logic"
        echo "7. ✅ Proper secret management"
        echo ""
        echo "🔗 Additional security resources:"
        echo "- GitHub Actions Security Best Practices"
        echo "- OpenSSF Scorecard"
        echo "- SLSA Framework"
        echo "- Supply Chain Security Guidelines"

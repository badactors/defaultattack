#!/bin/bash

# üö® EXPLOIT DEMONSTRATION SCRIPT
# This script shows how an attacker might exploit the GitHub Actions
# checkout credential persistence vulnerability

echo "üî• GitHub Actions Checkout Vulnerability Exploit Demo"
echo "====================================================="
echo ""
echo "‚ö†Ô∏è  WARNING: This is for educational purposes only!"
echo "    Do not use this for malicious purposes."
echo ""

# Check if we're in a GitHub Actions environment
if [ "$GITHUB_ACTIONS" = "true" ]; then
    echo "üéØ GitHub Actions environment detected!"
    echo "Repository: $GITHUB_REPOSITORY"
    echo "Workflow: $GITHUB_WORKFLOW"
    echo "Run ID: $GITHUB_RUN_ID"
    echo ""
else
    echo "üìç Running in local environment (simulated)"
    echo ""
fi

# Function to demonstrate credential extraction
demonstrate_credential_extraction() {
    echo "üïµÔ∏è  STEP 1: Credential Extraction Simulation"
    echo "----------------------------------------"
    
    # Check if .git/config exists and contains credentials
    if [ -f ".git/config" ]; then
        echo "‚úÖ Found .git/config file"
        
        # Look for credential information
        if grep -q "credential" .git/config; then
            echo "üö® CRITICAL: Credential configuration found in .git/config!"
            echo "Content preview:"
            grep -A 5 -B 5 "credential" .git/config | head -20
        fi
        
        if grep -q "token" .git/config; then
            echo "üö® CRITICAL: Token reference found in .git/config!"
            echo "Content preview:"
            grep -A 5 -B 5 "token" .git/config | head -20
        fi
        
        if grep -q "github.com" .git/config; then
            echo "üîç GitHub configuration found:"
            grep -A 3 -B 3 "github.com" .git/config
        fi
    else
        echo "‚ùå .git/config not found (secure configuration or not in git repo)"
    fi
    echo ""
}

# Function to demonstrate environment variable access
demonstrate_env_access() {
    echo "üåç STEP 2: Environment Variable Analysis"
    echo "--------------------------------------"
    
    echo "üîç Searching for sensitive environment variables..."
    
    # Look for GitHub-related environment variables
    echo "GitHub-related variables:"
    env | grep -i github | head -10 || echo "None found"
    echo ""
    
    # Look for token-related environment variables
    echo "Token-related variables:"
    env | grep -i token | head -5 || echo "None found"
    echo ""
    
    # Look for secret-related environment variables
    echo "Secret-related variables:"
    env | grep -i secret | head -5 || echo "None found"
    echo ""
}

# Function to simulate malicious payload execution
simulate_malicious_payload() {
    echo "üíÄ STEP 3: Malicious Payload Simulation"
    echo "-------------------------------------"
    
    echo "üö® In a real attack, malicious code could:"
    echo "1. Extract GitHub tokens from .git/config"
    echo "2. Access repository secrets through environment"
    echo "3. Make authenticated API calls to GitHub"
    echo "4. Read private repository contents"
    echo "5. Modify source code and push changes"
    echo "6. Publish malicious packages with legitimate credentials"
    echo "7. Access organization resources"
    echo "8. Exfiltrate sensitive data"
    echo ""
    
    # Simulate credential exfiltration (without actually doing it)
    echo "üì° Simulated credential exfiltration:"
    echo "- Extracting tokens from git configuration..."
    echo "- Identifying target repositories..."
    echo "- Preparing payload injection..."
    echo "- Establishing command & control channel..."
    echo ""
    echo "‚ö†Ô∏è  (Simulation only - no actual exfiltration performed)"
    echo ""
}

# Function to demonstrate supply chain attack
simulate_supply_chain_attack() {
    echo "üîó STEP 4: Supply Chain Attack Simulation"
    echo "---------------------------------------"
    
    echo "üì¶ NPM Package Compromise Simulation:"
    echo "- Injecting malicious code into package..."
    echo "- Using legitimate credentials to publish..."
    echo "- Package appears trustworthy due to valid signatures..."
    echo "- Backdoor code executed on installation..."
    echo ""
    
    echo "üê≥ Docker Image Compromise Simulation:"
    echo "- Modifying Dockerfile with malicious layers..."
    echo "- Using legitimate credentials to push to registry..."
    echo "- Image appears legitimate due to valid provenance..."
    echo "- Malicious code executed on container startup..."
    echo ""
    
    echo "üéØ Potential Impact:"
    echo "- Widespread distribution of compromised software"
    echo "- Access to downstream systems and data"
    echo "- Reputation damage to legitimate maintainers"
    echo "- Difficult detection due to valid credentials"
    echo ""
}

# Function to show mitigation strategies
show_mitigation() {
    echo "üõ°Ô∏è  STEP 5: Mitigation Strategies"
    echo "-------------------------------"
    
    echo "‚úÖ Immediate Actions:"
    echo "1. Set 'persist-credentials: false' in checkout actions"
    echo "2. Use minimal workflow permissions"
    echo "3. Implement secret scanning"
    echo "4. Enable branch protection rules"
    echo "5. Require signed commits"
    echo ""
    
    echo "‚úÖ Long-term Security Measures:"
    echo "1. Regular security audits of workflows"
    echo "2. Dependency vulnerability scanning"
    echo "3. Container image security scanning"
    echo "4. Implement SLSA compliance"
    echo "5. Use provenance attestations"
    echo "6. Monitor for suspicious activity"
    echo ""
    
    echo "‚úÖ Example Secure Checkout Configuration:"
    echo "- uses: actions/checkout@v4"
    echo "  with:"
    echo "    persist-credentials: false"
    echo "    token: \${{ secrets.GITHUB_TOKEN }}"
    echo ""
}

# Main execution
main() {
    demonstrate_credential_extraction
    demonstrate_env_access
    simulate_malicious_payload
    simulate_supply_chain_attack
    show_mitigation
    
    echo "üéØ DEMONSTRATION COMPLETE"
    echo "========================"
    echo ""
    echo "üîó References:"
    echo "- GitHub Issue: https://github.com/actions/checkout/issues/485"
    echo "- Security Research: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/"
    echo "- OpenSSF Guidelines: https://openssf.org/"
    echo ""
    echo "‚ö†Ô∏è  Remember: This demonstration is for educational purposes only."
    echo "   Always follow responsible disclosure practices."
}

# Run the demonstration
main
